// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  Cart          Cart?
  orders        Order[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  price       Float
  image       String
  stock       Int
  CartItem    CartItem[]
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Cart {
  id      Int        @id @default(autoincrement())
  userId  String     @unique
  items   CartItem[]
  user    User       @relation(fields: [userId], references: [id])

  @@map("carts")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

model Order {
  id        Int      @id @default(autoincrement())
  userId    String
  total     Float
  status    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  
  @@map("orders")
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  
  @@map("contact_messages")
}
model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  products Product[]
}